package app

import (
	"fmt"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestKustomizeAddKeyValue(t *testing.T) {
	assert_ := assert.New(t)

	type test struct {
		kustomization        string
		key                  string
		value                string
		updatedKustomization string
	}

	tests := []test{
		{
			``,
			"foo",
			"bar",
			`foo: bar
`,
		},
		{
			`foo: bar`,
			"abba",
			"babba",
			`foo: bar
abba: babba
`,
		},
		{
			`foo: bar`,
			"foo",
			"abba",
			`foo: abba
`,
		},
		{
			`# This should be left alone
foo: bar
# This as well`,
			"foo",
			"abba",
			`# This should be left alone
foo: abba
# This as well
`,
		},
		{
			`# This file has been generated by kga
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

resources:
  - ../base
#  - resources/example.yaml

#patchesJson6902:
#  - target:
#      name: example-ingress
#      group: networking.k8s.io
#      version: v1beta1
#      kind: Ingress
#    path: patches/example_json.yaml

#patchesStrategicMerge:
#  - patches/example.yaml`,
			"foo",
			"bar",
			`# This file has been generated by kga
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
resources:
  - ../base
#  - resources/example.yaml

foo: bar

#patchesJson6902:
#  - target:
#      name: example-ingress
#      group: networking.k8s.io
#      version: v1beta1
#      kind: Ingress
#    path: patches/example_json.yaml

#patchesStrategicMerge:
#  - patches/example.yaml
`,
		},
	}

	for i, tst := range tests {

		assert_.NotPanicsf(func() {
			kustomizeAddKeyValue(tst.kustomization, tst.key, tst.value)
		}, "Failed test: %d", i+1)
		k := kustomizeAddKeyValue(tst.kustomization, tst.key, tst.value)
		assert_.Equal(tst.updatedKustomization, k, fmt.Sprintf("Failed test: %d", i+1))
	}
}

func TestKustomizeAddListElement(t *testing.T) {
	assert_ := assert.New(t)

	type test struct {
		kustomization        string
		key                  string
		value                string
		updatedKustomization string
	}

	tests := []test{
		{
			``,
			"foo",
			"bar",
			`foo:
  - bar
`,
		},
		{
			`foo: bar`,
			"abba",
			"babba",
			`foo: bar
abba:
  - babba
`,
		},
		{
			`foo: 
  - bar`,
			"foo",
			"abba",
			`foo:
  - bar
  - abba
`,
		},
		{
			`foo: 
  - bar`,
			"foo",
			"bar",
			`foo:
  - bar
`,
		},
		{
			`# This should be left alone
foo: bar
# This as well`,
			"foo2",
			"abba",
			`# This should be left alone
foo: bar
# This as well

foo2:
  - abba
`,
		},
		{
			`# This file has been generated by kga
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

resources:
  - ../base
  #- resources/example.yaml

#patchesJson6902:
#  - target:
#      name: example-ingress
#      group: networking.k8s.io
#      version: v1beta1
#      kind: Ingress
#    path: patches/example_json.yaml

#patchesStrategicMerge:
#  - patches/example.yaml`,
			"resources",
			"resources/namespace.yaml",
			`# This file has been generated by kga
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
resources:
  - ../base
  #- resources/example.yaml

  - resources/namespace.yaml

#patchesJson6902:
#  - target:
#      name: example-ingress
#      group: networking.k8s.io
#      version: v1beta1
#      kind: Ingress
#    path: patches/example_json.yaml

#patchesStrategicMerge:
#  - patches/example.yaml
`,
		},
	}

	for i, tst := range tests {

		assert_.NotPanicsf(func() {
			kustomizeAddListElement(tst.kustomization, tst.key, tst.value, ComperatorEqualStrings)
		}, "Failed test: %d", i+1)
		k := kustomizeAddListElement(tst.kustomization, tst.key, tst.value, ComperatorEqualStrings)
		assert_.Equal(tst.updatedKustomization, k, fmt.Sprintf("Failed test: %d", i+1))
	}
}


func TestComperatorEqualStringPathsWrapper(t *testing.T) {
	assert_ := assert.New(t)

	type test struct {
		basePath string
		existing string
		value string
		expectEqual bool
	}

	tests := []test{
		{
			"./",
			"./wow.yaml",
			"./wow.yaml",
			true,
		},
		{
			"./",
			"./wow.yaml",
			"wow.yaml",
			true,
		},
		{
			"/foo/bar",
			"./wow.yaml",
			"/foo/bar/wow.yaml",
			true,
		},
		{
			"/foo/bar",
			"wow.yaml",
			"/foo/bar/wow.yaml",
			true,
		},
		{
			"/foo/bar",
			"/wow.yaml",
			"/foo/bar/wow.yaml",
			false,
		},
	}

	for i, tst := range tests {
		assert_.Equal(tst.expectEqual, ComperatorEqualStringPathsWrapper(tst.basePath)(tst.existing, tst.value),
			fmt.Sprintf("Failed test: %d", i + 1))
	}
}